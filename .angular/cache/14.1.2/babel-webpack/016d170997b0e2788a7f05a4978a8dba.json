{"ast":null,"code":"import { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, END, hasModifierKey, HOME, RIGHT_ARROW, LEFT_ARROW, ESCAPE } from '@angular/cdk/keycodes';\nimport { Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, query, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nconst _c0 = [\"mat-menu-item\", \"\"];\nconst _c1 = [\"*\"];\n\nfunction _MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function _MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r1._handleKeydown($event));\n    })(\"click\", function _MatMenu_ng_template_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r3.closed.emit(\"click\"));\n    })(\"@transformMenu.start\", function _MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r4._onAnimationStart($event));\n    })(\"@transformMenu.done\", function _MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r5._onAnimationDone($event));\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\n\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: /*#__PURE__*/trigger('transformMenu', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), /*#__PURE__*/transition('void => enter', /*#__PURE__*/group([/*#__PURE__*/query('.mat-menu-content, .mat-mdc-menu-content', /*#__PURE__*/animate('100ms linear', /*#__PURE__*/style({\n    opacity: 1\n  }))), /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    transform: 'scale(1)'\n  }))])), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms 25ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: /*#__PURE__*/trigger('fadeInItems', [\n  /*#__PURE__*/\n  // TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', /*#__PURE__*/style({\n    opacity: 1\n  })), /*#__PURE__*/transition('void => *', [/*#__PURE__*/style({\n    opacity: 0\n  }), /*#__PURE__*/animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nconst transformMenu = matMenuAnimations.transformMenu;\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-content.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n\nlet MatMenuContent = /*#__PURE__*/(() => {\n  class MatMenuContent {\n    /**\n     * @param {?} _template\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _injector\n     * @param {?} _viewContainerRef\n     * @param {?} _document\n     * @param {?=} _changeDetectorRef\n     */\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n      this._template = _template;\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._appRef = _appRef;\n      this._injector = _injector;\n      this._viewContainerRef = _viewContainerRef;\n      this._document = _document;\n      this._changeDetectorRef = _changeDetectorRef;\n      /**\n       * Emits when the menu content has been attached.\n       */\n\n      this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * \\@docs-private\n     * @param {?=} context\n     * @return {?}\n     */\n\n\n    attach(context = {}) {\n      if (!this._portal) {\n        this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n      }\n\n      this.detach();\n\n      if (!this._outlet) {\n        this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n      }\n      /** @type {?} */\n\n\n      const element = this._template.elementRef.nativeElement; // Because we support opening the same menu from different triggers (which in turn have their\n      // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n      // risk it staying attached to a pane that's no longer in the DOM.\n\n      /** @type {?} */\n      element.parentNode.insertBefore(this._outlet.outletElement, element); // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n      // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n      // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n      // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n      // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n      // @breaking-change 9.0.0 Make change detector ref required\n\n      if (this._changeDetectorRef) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._portal.attach(this._outlet, context);\n\n      this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * \\@docs-private\n     * @return {?}\n     */\n\n\n    detach() {\n      if (this._portal.isAttached) {\n        this._portal.detach();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._outlet) {\n        this._outlet.dispose();\n      }\n    }\n\n  }\n\n  MatMenuContent.ɵfac = function MatMenuContent_Factory(t) {\n    return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatMenuContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatMenuContent,\n    selectors: [[\"ng-template\", \"matMenuContent\", \"\"]]\n  });\n  /** @nocollapse */\n\n  return MatMenuContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatMenuContent.prototype._portal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._outlet;\n  /**\n   * Emits when the menu content has been attached.\n   * @type {?}\n   */\n\n  MatMenuContent.prototype._attached;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._template;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._componentFactoryResolver;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._appRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._viewContainerRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._changeDetectorRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-panel.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_MENU_PANEL = /*#__PURE__*/new InjectionToken('MAT_MENU_PANEL');\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * \\@docs-private\n * @record\n * @template T\n */\n\nfunction MatMenuPanel() {}\n\nif (false) {\n  /** @type {?} */\n  MatMenuPanel.prototype.xPosition;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.yPosition;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.overlapTrigger;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.templateRef;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.close;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.parentMenu;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.direction;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.focusFirstItem;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.resetActiveItem;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.setPositionClasses;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.lazyContent;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.backdropClass;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.hasBackdrop;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.panelId;\n  /**\n   * @deprecated To be removed.\n   * \\@breaking-change 8.0.0\n   * @type {?|undefined}\n   */\n\n  MatMenuPanel.prototype.addItem;\n  /**\n   * @deprecated To be removed.\n   * \\@breaking-change 8.0.0\n   * @type {?|undefined}\n   */\n\n  MatMenuPanel.prototype.removeItem;\n  /**\n   * @param {?} depth\n   * @return {?}\n   */\n\n  MatMenuPanel.prototype.setElevation = function (depth) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatMenuItem.\n\n/**\n * \\@docs-private\n */\n\n\nclass MatMenuItemBase {}\n/** @type {?} */\n\n\nconst _MatMenuItemMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinDisabled(MatMenuItemBase));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n\n\nlet MatMenuItem = /*#__PURE__*/(() => {\n  class MatMenuItem extends _MatMenuItemMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?=} document\n     * @param {?=} _focusMonitor\n     * @param {?=} _parentMenu\n     */\n    constructor(_elementRef, document, _focusMonitor, _parentMenu) {\n      // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n      super();\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this._parentMenu = _parentMenu;\n      /**\n       * ARIA role for the menu item.\n       */\n\n      this.role = 'menuitem';\n      /**\n       * Stream that emits when the menu item is hovered.\n       */\n\n      this._hovered = new Subject();\n      /**\n       * Stream that emits when the menu item is focused.\n       */\n\n      this._focused = new Subject();\n      /**\n       * Whether the menu item is highlighted.\n       */\n\n      this._highlighted = false;\n      /**\n       * Whether the menu item acts as a trigger for a sub-menu.\n       */\n\n      this._triggersSubmenu = false;\n\n      if (_focusMonitor) {\n        // Start monitoring the element so it gets the appropriate focused classes. We want\n        // to show the focus style for menu items only when the focus was not caused by a\n        // mouse or touch interaction.\n        _focusMonitor.monitor(this._elementRef, false);\n      }\n\n      if (_parentMenu && _parentMenu.addItem) {\n        _parentMenu.addItem(this);\n      }\n\n      this._document = document;\n    }\n    /**\n     * Focuses the menu item.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    focus(origin = 'program', options) {\n      if (this._focusMonitor) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n      } else {\n        this._getHostElement().focus(options);\n      }\n\n      this._focused.next(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._focusMonitor) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n\n      if (this._parentMenu && this._parentMenu.removeItem) {\n        this._parentMenu.removeItem(this);\n      }\n\n      this._hovered.complete();\n\n      this._focused.complete();\n    }\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n\n\n    _getTabIndex() {\n      return this.disabled ? '-1' : '0';\n    }\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n\n\n    _getHostElement() {\n      return this._elementRef.nativeElement;\n    }\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _checkDisabled(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n    /**\n     * Emits to the hover stream.\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _handleMouseEnter() {\n      this._hovered.next(this);\n    }\n    /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n\n\n    getLabel() {\n      /** @type {?} */\n      const element = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n      /** @type {?} */\n\n      let output = '';\n\n      if (element.childNodes) {\n        /** @type {?} */\n        const length = element.childNodes.length; // Go through all the top-level text nodes and extract their text.\n        // We skip anything that's not a text node to prevent the text from\n        // being thrown off by something like an icon.\n\n        for (let i = 0; i < length; i++) {\n          if (element.childNodes[i].nodeType === textNodeType) {\n            output += element.childNodes[i].textContent;\n          }\n        }\n      }\n\n      return output.trim();\n    }\n\n  }\n\n  MatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n    return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8));\n  };\n\n  MatMenuItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatMenuItem,\n    selectors: [[\"\", \"mat-menu-item\", \"\"]],\n    hostAttrs: [1, \"mat-focus-indicator\"],\n    hostVars: 10,\n    hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n          return ctx._checkDisabled($event);\n        })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n          return ctx._handleMouseEnter();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      role: \"role\"\n    },\n    exportAs: [\"matMenuItem\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 2,\n    consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]],\n    template: function MatMenuItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n      }\n    },\n    dependencies: [ɵngcc2.MatRipple],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatMenuItem;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  MatMenuItem.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatMenuItem.ngAcceptInputType_disableRipple;\n  /**\n   * ARIA role for the menu item.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype.role;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuItem.prototype._document;\n  /**\n   * Stream that emits when the menu item is hovered.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype._hovered;\n  /**\n   * Stream that emits when the menu item is focused.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype._focused;\n  /**\n   * Whether the menu item is highlighted.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype._highlighted;\n  /**\n   * Whether the menu item acts as a trigger for a sub-menu.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype._triggersSubmenu;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuItem.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuItem.prototype._focusMonitor;\n  /** @type {?} */\n\n  MatMenuItem.prototype._parentMenu;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default `mat-menu` options that can be overridden.\n * @record\n */\n\n\nfunction MatMenuDefaultOptions() {}\n\nif (false) {\n  /**\n   * The x-axis position of the menu.\n   * @type {?}\n   */\n  MatMenuDefaultOptions.prototype.xPosition;\n  /**\n   * The y-axis position of the menu.\n   * @type {?}\n   */\n\n  MatMenuDefaultOptions.prototype.yPosition;\n  /**\n   * Whether the menu should overlap the menu trigger.\n   * @type {?}\n   */\n\n  MatMenuDefaultOptions.prototype.overlapTrigger;\n  /**\n   * Class to be applied to the menu's backdrop.\n   * @type {?}\n   */\n\n  MatMenuDefaultOptions.prototype.backdropClass;\n  /**\n   * Whether the menu has a backdrop.\n   * @type {?|undefined}\n   */\n\n  MatMenuDefaultOptions.prototype.hasBackdrop;\n}\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n * @type {?}\n */\n\n\nconst MAT_MENU_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_MENU_BASE_ELEVATION = 4;\n/** @type {?} */\n\nlet menuPanelUid = 0;\n/**\n * Base class with all of the `MatMenu` functionality.\n */\n// tslint:disable-next-line:class-name\n\nlet _MatMenuBase = /*#__PURE__*/(() => {\n  class _MatMenuBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions;\n      this._xPosition = this._defaultOptions.xPosition;\n      this._yPosition = this._defaultOptions.yPosition;\n      /**\n       * Only the direct descendant menu items.\n       */\n\n      this._directDescendantItems = new QueryList();\n      /**\n       * Subscription to tab events on the menu panel\n       */\n\n      this._tabSubscription = Subscription.EMPTY;\n      /**\n       * Config object to be passed into the menu's ngClass\n       */\n\n      this._classList = {};\n      /**\n       * Current state of the panel animation.\n       */\n\n      this._panelAnimationState = 'void';\n      /**\n       * Emits whenever an animation on the menu completes.\n       */\n\n      this._animationDone = new Subject();\n      /**\n       * Class to be added to the backdrop element.\n       */\n\n      this.backdropClass = this._defaultOptions.backdropClass;\n      this._overlapTrigger = this._defaultOptions.overlapTrigger;\n      this._hasBackdrop = this._defaultOptions.hasBackdrop;\n      /**\n       * Event emitted when the menu is closed.\n       */\n\n      this.closed = new EventEmitter();\n      /**\n       * Event emitted when the menu is closed.\n       * @deprecated Switch to `closed` instead\n       * \\@breaking-change 8.0.0\n       */\n\n      this.close = this.closed;\n      this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /**\n     * Position of the menu in the X axis.\n     * @return {?}\n     */\n\n\n    get xPosition() {\n      return this._xPosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set xPosition(value) {\n      if (value !== 'before' && value !== 'after') {\n        throwMatMenuInvalidPositionX();\n      }\n\n      this._xPosition = value;\n      this.setPositionClasses();\n    }\n    /**\n     * Position of the menu in the Y axis.\n     * @return {?}\n     */\n\n\n    get yPosition() {\n      return this._yPosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set yPosition(value) {\n      if (value !== 'above' && value !== 'below') {\n        throwMatMenuInvalidPositionY();\n      }\n\n      this._yPosition = value;\n      this.setPositionClasses();\n    }\n    /**\n     * Whether the menu should overlap its trigger.\n     * @return {?}\n     */\n\n\n    get overlapTrigger() {\n      return this._overlapTrigger;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set overlapTrigger(value) {\n      this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the menu has a backdrop.\n     * @return {?}\n     */\n\n\n    get hasBackdrop() {\n      return this._hasBackdrop;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set hasBackdrop(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param {?} classes list of class names\n     * @return {?}\n     */\n\n\n    set panelClass(classes) {\n      /** @type {?} */\n      const previousPanelClass = this._previousPanelClass;\n\n      if (previousPanelClass && previousPanelClass.length) {\n        previousPanelClass.split(' ').forEach(\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => {\n          this._classList[className] = false;\n        });\n      }\n\n      this._previousPanelClass = classes;\n\n      if (classes && classes.length) {\n        classes.split(' ').forEach(\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => {\n          this._classList[className] = true;\n        });\n        this._elementRef.nativeElement.className = '';\n      }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n\n    get classList() {\n      return this.panelClass;\n    }\n    /**\n     * @param {?} classes\n     * @return {?}\n     */\n\n\n    set classList(classes) {\n      this.panelClass = classes;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.setPositionClasses();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._updateDirectDescendants();\n\n      this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n      this._tabSubscription = this._keyManager.tabOut.subscribe(\n      /**\n      * @return {?}\n      */\n      () => this.closed.emit('tab')); // If a user manually (programatically) focuses a menu item, we need to reflect that focus\n      // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n      // is internal and we know that it gets completed on destroy.\n\n      this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(\n      /**\n      * @param {?} items\n      * @return {?}\n      */\n      items => merge(...items.map(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      item => item._focused)))).subscribe(\n      /**\n      * @param {?} focusedItem\n      * @return {?}\n      */\n      focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._directDescendantItems.destroy();\n\n      this._tabSubscription.unsubscribe();\n\n      this.closed.complete();\n    }\n    /**\n     * Stream that emits whenever the hovered menu item changes.\n     * @return {?}\n     */\n\n\n    _hovered() {\n      // Coerce the `changes` property because Angular types it as `Observable<any>`\n\n      /** @type {?} */\n      const itemChanges =\n      /** @type {?} */\n      this._directDescendantItems.changes;\n      return (\n        /** @type {?} */\n        itemChanges.pipe(startWith(this._directDescendantItems), switchMap(\n        /**\n        * @param {?} items\n        * @return {?}\n        */\n        items => merge(...items.map(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        item => item._hovered))))\n      );\n    }\n    /*\n       * Registers a menu item with the menu.\n       * @docs-private\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 9.0.0\n       */\n\n    /**\n     * @param {?} _item\n     * @return {?}\n     */\n\n\n    addItem(_item) {}\n    /**\n     * Removes an item from the menu.\n     * \\@docs-private\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 9.0.0\n     * @param {?} _item\n     * @return {?}\n     */\n\n\n    removeItem(_item) {}\n    /**\n     * Handle a keyboard event from the menu, delegating to the appropriate action.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _handleKeydown(event) {\n      /** @type {?} */\n      const keyCode = event.keyCode;\n      /** @type {?} */\n\n      const manager = this._keyManager;\n\n      switch (keyCode) {\n        case ESCAPE:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case LEFT_ARROW:\n          if (this.parentMenu && this.direction === 'ltr') {\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case RIGHT_ARROW:\n          if (this.parentMenu && this.direction === 'rtl') {\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case HOME:\n        case END:\n          if (!hasModifierKey(event)) {\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            event.preventDefault();\n          }\n\n          break;\n\n        default:\n          if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n            manager.setFocusOrigin('keyboard');\n          }\n\n          manager.onKeydown(event);\n      }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n     * @return {?}\n     */\n\n\n    focusFirstItem(origin = 'program') {\n      // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n      if (this.lazyContent) {\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n        /**\n        * @return {?}\n        */\n        () => this._focusFirstItem(origin));\n      } else {\n        this._focusFirstItem(origin);\n      }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     * @private\n     * @param {?} origin\n     * @return {?}\n     */\n\n\n    _focusFirstItem(origin) {\n      /** @type {?} */\n      const manager = this._keyManager;\n      manager.setFocusOrigin(origin).setFirstItemActive(); // If there's no active item at this point, it means that all the items are disabled.\n      // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n      // give _some_ feedback to screen readers.\n\n      if (!manager.activeItem && this._directDescendantItems.length) {\n        /** @type {?} */\n        let element = this._directDescendantItems.first._getHostElement().parentElement; // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n        // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n        // because the panel is inside an `ng-template`. We work around it by starting from one of\n        // the items and walking up the DOM.\n\n\n        while (element) {\n          if (element.getAttribute('role') === 'menu') {\n            element.focus();\n            break;\n          } else {\n            element = element.parentElement;\n          }\n        }\n      }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     * @return {?}\n     */\n\n\n    resetActiveItem() {\n      this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param {?} depth Number of parent menus that come before the menu.\n     * @return {?}\n     */\n\n\n    setElevation(depth) {\n      // The elevation starts at the base and increases by one for each level.\n      // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n\n      /** @type {?} */\n      const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n      /** @type {?} */\n\n      const newElevation = `mat-elevation-z${elevation}`;\n      /** @type {?} */\n\n      const customElevation = Object.keys(this._classList).find(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => c.startsWith('mat-elevation-z'));\n\n      if (!customElevation || customElevation === this._previousElevation) {\n        if (this._previousElevation) {\n          this._classList[this._previousElevation] = false;\n        }\n\n        this._classList[newElevation] = true;\n        this._previousElevation = newElevation;\n      }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * \\@docs-private\n     * @param {?=} posX Position of the menu along the x axis.\n     * @param {?=} posY Position of the menu along the y axis.\n     * @return {?}\n     */\n\n\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n      /** @type {?} */\n      const classes = this._classList;\n      classes['mat-menu-before'] = posX === 'before';\n      classes['mat-menu-after'] = posX === 'after';\n      classes['mat-menu-above'] = posY === 'above';\n      classes['mat-menu-below'] = posY === 'below';\n    }\n    /**\n     * Starts the enter animation.\n     * @return {?}\n     */\n\n\n    _startAnimation() {\n      // @breaking-change 8.0.0 Combine with _resetAnimation.\n      this._panelAnimationState = 'enter';\n    }\n    /**\n     * Resets the panel animation to its initial state.\n     * @return {?}\n     */\n\n\n    _resetAnimation() {\n      // @breaking-change 8.0.0 Combine with _startAnimation.\n      this._panelAnimationState = 'void';\n    }\n    /**\n     * Callback that is invoked when the panel animation completes.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _onAnimationDone(event) {\n      this._animationDone.next(event);\n\n      this._isAnimating = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _onAnimationStart(event) {\n      this._isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,\n      // because we move focus to the first item while it's still being animated, which can throw\n      // the browser off when it determines the scroll position. Alternatively we can move focus\n      // when the animation is done, however moving focus asynchronously will interrupt screen\n      // readers which are in the process of reading out the menu already. We take the `element`\n      // from the `event` since we can't use a `ViewChild` to access the pane.\n\n      if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n        event.element.scrollTop = 0;\n      }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     * @private\n     * @return {?}\n     */\n\n\n    _updateDirectDescendants() {\n      this._allItems.changes.pipe(startWith(this._allItems)).subscribe(\n      /**\n      * @param {?} items\n      * @return {?}\n      */\n      items => {\n        this._directDescendantItems.reset(items.filter(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        item => item._parentMenu === this));\n\n        this._directDescendantItems.notifyOnChanges();\n      });\n    }\n\n  }\n\n  _MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) {\n    return new (t || _MatMenuBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n  };\n\n  _MatMenuBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatMenuBase,\n    contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allItems = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    viewQuery: function _MatMenuBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    inputs: {\n      backdropClass: \"backdropClass\",\n      xPosition: \"xPosition\",\n      yPosition: \"yPosition\",\n      overlapTrigger: \"overlapTrigger\",\n      hasBackdrop: \"hasBackdrop\",\n      panelClass: [\"class\", \"panelClass\"],\n      classList: \"classList\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n    },\n    outputs: {\n      closed: \"closed\",\n      close: \"close\"\n    }\n  });\n  /** @nocollapse */\n\n  return _MatMenuBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  _MatMenuBase.ngAcceptInputType_overlapTrigger;\n  /** @type {?} */\n\n  _MatMenuBase.ngAcceptInputType_hasBackdrop;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._keyManager;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._xPosition;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._yPosition;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._previousElevation;\n  /**\n   * All items inside the menu. Includes items nested inside another menu.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._allItems;\n  /**\n   * Only the direct descendant menu items.\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._directDescendantItems;\n  /**\n   * Subscription to tab events on the menu panel\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._tabSubscription;\n  /**\n   * Config object to be passed into the menu's ngClass\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._classList;\n  /**\n   * Current state of the panel animation.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._panelAnimationState;\n  /**\n   * Emits whenever an animation on the menu completes.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._animationDone;\n  /**\n   * Whether the menu is animating.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._isAnimating;\n  /**\n   * Parent menu of the current menu panel.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.parentMenu;\n  /**\n   * Layout direction of the menu.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.direction;\n  /**\n   * Class to be added to the backdrop element.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.backdropClass;\n  /**\n   * aria-label for the menu panel.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.ariaLabel;\n  /**\n   * aria-labelledby for the menu panel.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.ariaLabelledby;\n  /**\n   * aria-describedby for the menu panel.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.ariaDescribedby;\n  /**\n   * \\@docs-private\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.templateRef;\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.items;\n  /**\n   * Menu content that will be rendered lazily.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.lazyContent;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._overlapTrigger;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._hasBackdrop;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._previousPanelClass;\n  /**\n   * Event emitted when the menu is closed.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.closed;\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.close;\n  /** @type {?} */\n\n  _MatMenuBase.prototype.panelId;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._defaultOptions;\n}\n/**\n * \\@docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs.\n */\n\n\nlet MatMenu = /*#__PURE__*/(() => {\n  class MatMenu extends _MatMenuBase {}\n\n  MatMenu.ɵfac = /*@__PURE__*/function () {\n    let ɵMatMenu_BaseFactory;\n    return function MatMenu_Factory(t) {\n      return (ɵMatMenu_BaseFactory || (ɵMatMenu_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatMenu)))(t || MatMenu);\n    };\n  }();\n\n  MatMenu.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatMenu,\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatMenu;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/**\n * \\@docs-public MatMenu\n */\n// tslint:disable-next-line:class-name\n\n\nlet _MatMenu = /*#__PURE__*/(() => {\n  class _MatMenu extends MatMenu {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} defaultOptions\n     */\n    constructor(elementRef, ngZone, defaultOptions) {\n      super(elementRef, ngZone, defaultOptions);\n    }\n\n  }\n\n  _MatMenu.ɵfac = function _MatMenu_Factory(t) {\n    return new (t || _MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n  };\n\n  _MatMenu.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: _MatMenu,\n    selectors: [[\"mat-menu\"]],\n    exportAs: [\"matMenu\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_MENU_PANEL,\n      useExisting: MatMenu\n    }, {\n      provide: MatMenu,\n      useExisting: _MatMenu\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n    template: function _MatMenu_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, _MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n      }\n    },\n    dependencies: [ɵngcc3.NgClass],\n    styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return _MatMenu;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that determines the scroll handling while the menu is open.\n * @type {?}\n */\n\n\nconst MAT_MENU_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    () => overlay.scrollStrategies.reposition()\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Default top padding of the menu panel.\n * @type {?}\n */\n\nconst MENU_PANEL_TOP_PADDING = 8;\n/**\n * Options for binding a passive event listener.\n * @type {?}\n */\n\nconst passiveEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n}); // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * Directive applied to an element that should trigger a `mat-menu`.\n */\n\nlet MatMenuTrigger = /*#__PURE__*/(() => {\n  class MatMenuTrigger {\n    /**\n     * @param {?} _overlay\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} scrollStrategy\n     * @param {?} _parentMenu\n     * @param {?} _menuItemInstance\n     * @param {?} _dir\n     * @param {?=} _focusMonitor\n     */\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n      this._overlay = _overlay;\n      this._element = _element;\n      this._viewContainerRef = _viewContainerRef;\n      this._parentMenu = _parentMenu;\n      this._menuItemInstance = _menuItemInstance;\n      this._dir = _dir;\n      this._focusMonitor = _focusMonitor;\n      this._overlayRef = null;\n      this._menuOpen = false;\n      this._closingActionsSubscription = Subscription.EMPTY;\n      this._hoverSubscription = Subscription.EMPTY;\n      this._menuCloseSubscription = Subscription.EMPTY;\n      /**\n       * Handles touch start events on the trigger.\n       * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n       */\n\n      this._handleTouchStart =\n      /**\n      * @return {?}\n      */\n      () => this._openedBy = 'touch'; // Tracking input type is necessary so it's possible to only auto-focus\n      // the first item of the list when the menu is opened via the keyboard\n\n\n      this._openedBy = null;\n      /**\n       * Whether focus should be restored when the menu is closed.\n       * Note that disabling this option can have accessibility implications\n       * and it's up to you to manage focus, if you decide to turn it off.\n       */\n\n      this.restoreFocus = true;\n      /**\n       * Event emitted when the associated menu is opened.\n       */\n\n      this.menuOpened = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is opened.\n       * @deprecated Switch to `menuOpened` instead\n       * \\@breaking-change 8.0.0\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onMenuOpen = this.menuOpened;\n      /**\n       * Event emitted when the associated menu is closed.\n       */\n\n      this.menuClosed = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is closed.\n       * @deprecated Switch to `menuClosed` instead\n       * \\@breaking-change 8.0.0\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onMenuClose = this.menuClosed;\n\n      _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n      if (_menuItemInstance) {\n        _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n      }\n\n      this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n\n    get _deprecatedMatMenuTriggerFor() {\n      return this.menu;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set _deprecatedMatMenuTriggerFor(v) {\n      this.menu = v;\n    }\n    /**\n     * References the menu instance that the trigger is associated with.\n     * @return {?}\n     */\n\n\n    get menu() {\n      return this._menu;\n    }\n    /**\n     * @param {?} menu\n     * @return {?}\n     */\n\n\n    set menu(menu) {\n      if (menu === this._menu) {\n        return;\n      }\n\n      this._menu = menu;\n\n      this._menuCloseSubscription.unsubscribe();\n\n      if (menu) {\n        this._menuCloseSubscription = menu.close.asObservable().subscribe(\n        /**\n        * @param {?} reason\n        * @return {?}\n        */\n        reason => {\n          this._destroyMenu(); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n          if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n            this._parentMenu.closed.emit(reason);\n          }\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._checkMenu();\n\n      this._handleHover();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n\n      this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n      this._menuCloseSubscription.unsubscribe();\n\n      this._closingActionsSubscription.unsubscribe();\n\n      this._hoverSubscription.unsubscribe();\n    }\n    /**\n     * Whether the menu is open.\n     * @return {?}\n     */\n\n\n    get menuOpen() {\n      return this._menuOpen;\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n\n\n    get dir() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Whether the menu triggers a sub-menu or a top-level one.\n     * @return {?}\n     */\n\n\n    triggersSubmenu() {\n      return !!(this._menuItemInstance && this._parentMenu);\n    }\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n\n\n    toggleMenu() {\n      return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n\n\n    openMenu() {\n      if (this._menuOpen) {\n        return;\n      }\n\n      this._checkMenu();\n      /** @type {?} */\n\n\n      const overlayRef = this._createOverlay();\n      /** @type {?} */\n\n\n      const overlayConfig = overlayRef.getConfig();\n\n      this._setPosition(\n      /** @type {?} */\n      overlayConfig.positionStrategy);\n\n      overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n      overlayRef.attach(this._getPortal());\n\n      if (this.menu.lazyContent) {\n        this.menu.lazyContent.attach(this.menuData);\n      }\n\n      this._closingActionsSubscription = this._menuClosingActions().subscribe(\n      /**\n      * @return {?}\n      */\n      () => this.closeMenu());\n\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n\n\n    closeMenu() {\n      this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param {?=} origin Source of the menu trigger's focus.\n     * @param {?=} options\n     * @return {?}\n     */\n\n\n    focus(origin = 'program', options) {\n      if (this._focusMonitor) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n      } else {\n        this._element.nativeElement.focus(options);\n      }\n    }\n    /**\n     * Closes the menu and does the necessary cleanup.\n     * @private\n     * @return {?}\n     */\n\n\n    _destroyMenu() {\n      if (!this._overlayRef || !this.menuOpen) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const menu = this.menu;\n\n      this._closingActionsSubscription.unsubscribe();\n\n      this._overlayRef.detach();\n\n      this._restoreFocus();\n\n      if (menu instanceof MatMenu) {\n        menu._resetAnimation();\n\n        if (menu.lazyContent) {\n          // Wait for the exit animation to finish before detaching the content.\n          menu._animationDone.pipe(filter(\n          /**\n          * @param {?} event\n          * @return {?}\n          */\n          event => event.toState === 'void'), take(1), // Interrupt if the content got re-attached.\n          takeUntil(menu.lazyContent._attached)).subscribe({\n            next:\n            /**\n            * @return {?}\n            */\n            () =>\n            /** @type {?} */\n            menu.lazyContent.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete:\n            /**\n            * @return {?}\n            */\n            () => this._setIsMenuOpen(false)\n          });\n        } else {\n          this._setIsMenuOpen(false);\n        }\n      } else {\n        this._setIsMenuOpen(false);\n\n        if (menu.lazyContent) {\n          menu.lazyContent.detach();\n        }\n      }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n\n\n    _initMenu() {\n      this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n      this.menu.direction = this.dir;\n\n      this._setMenuElevation();\n\n      this._setIsMenuOpen(true);\n\n      this.menu.focusFirstItem(this._openedBy || 'program');\n    }\n    /**\n     * Updates the menu elevation based on the amount of parent menus that it has.\n     * @private\n     * @return {?}\n     */\n\n\n    _setMenuElevation() {\n      if (this.menu.setElevation) {\n        /** @type {?} */\n        let depth = 0;\n        /** @type {?} */\n\n        let parentMenu = this.menu.parentMenu;\n\n        while (parentMenu) {\n          depth++;\n          parentMenu = parentMenu.parentMenu;\n        }\n\n        this.menu.setElevation(depth);\n      }\n    }\n    /**\n     * Restores focus to the element that was focused before the menu was open.\n     * @private\n     * @return {?}\n     */\n\n\n    _restoreFocus() {\n      // We should reset focus if the user is navigating using a keyboard or\n      // if we have a top-level trigger which might cause focus to be lost\n      // when clicking on the backdrop.\n      if (this.restoreFocus) {\n        if (!this._openedBy) {\n          // Note that the focus style will show up both for `program` and\n          // `keyboard` so we don't have to specify which one it is.\n          this.focus();\n        } else if (!this.triggersSubmenu()) {\n          this.focus(this._openedBy);\n        }\n      }\n\n      this._openedBy = null;\n    } // set state rather than toggle to support triggers sharing a menu\n\n    /**\n     * @private\n     * @param {?} isOpen\n     * @return {?}\n     */\n\n\n    _setIsMenuOpen(isOpen) {\n      this._menuOpen = isOpen;\n      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n      if (this.triggersSubmenu()) {\n        this._menuItemInstance._highlighted = isOpen;\n      }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     * @private\n     * @return {?}\n     */\n\n\n    _checkMenu() {\n      if (!this.menu) {\n        throwMatMenuMissingError();\n      }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @private\n     * @return {?}\n     */\n\n\n    _createOverlay() {\n      if (!this._overlayRef) {\n        /** @type {?} */\n        const config = this._getOverlayConfig();\n\n        this._subscribeToPositions(\n        /** @type {?} */\n        config.positionStrategy);\n\n        this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n        // Ideally we'd also have our keyboard event logic in here, however doing so will\n        // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n        this._overlayRef.keydownEvents().subscribe();\n      }\n\n      return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @private\n     * @return {?} OverlayConfig\n     */\n\n\n    _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n        backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n        scrollStrategy: this._scrollStrategy(),\n        direction: this._dir\n      });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n\n\n    _subscribeToPositions(position) {\n      if (this.menu.setPositionClasses) {\n        position.positionChanges.subscribe(\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        change => {\n          /** @type {?} */\n          const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n          /** @type {?} */\n\n          const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n          /** @type {?} */\n          this.menu.setPositionClasses(posX, posY);\n        });\n      }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @private\n     * @param {?} positionStrategy Strategy whose position to update.\n     * @return {?}\n     */\n\n\n    _setPosition(positionStrategy) {\n      let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n      let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n      let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n      let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n      /** @type {?} */\n\n      let offsetY = 0;\n\n      if (this.triggersSubmenu()) {\n        // When the menu is a sub-menu, it should always align itself\n        // to the edges of the trigger, instead of overlapping it.\n        overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n        originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n        offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n      } else if (!this.menu.overlapTrigger) {\n        originY = overlayY === 'top' ? 'bottom' : 'top';\n        originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n      }\n\n      positionStrategy.withPositions([{\n        originX,\n        originY,\n        overlayX,\n        overlayY,\n        offsetY\n      }, {\n        originX: originFallbackX,\n        originY,\n        overlayX: overlayFallbackX,\n        overlayY,\n        offsetY\n      }, {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }, {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }]);\n    }\n    /**\n     * Returns a stream that emits whenever an action that should close the menu occurs.\n     * @private\n     * @return {?}\n     */\n\n\n    _menuClosingActions() {\n      /** @type {?} */\n      const backdrop =\n      /** @type {?} */\n      this._overlayRef.backdropClick();\n      /** @type {?} */\n\n\n      const detachments =\n      /** @type {?} */\n      this._overlayRef.detachments();\n      /** @type {?} */\n\n\n      const parentClose = this._parentMenu ? this._parentMenu.closed : of();\n      /** @type {?} */\n\n      const hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter(\n      /**\n      * @param {?} active\n      * @return {?}\n      */\n      active => active !== this._menuItemInstance), filter(\n      /**\n      * @return {?}\n      */\n      () => this._menuOpen)) : of();\n      return merge(backdrop, parentClose, hover, detachments);\n    }\n    /**\n     * Handles mouse presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _handleMousedown(event) {\n      if (!isFakeMousedownFromScreenReader(event)) {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the menu as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the menu item.\n\n        if (this.triggersSubmenu()) {\n          event.preventDefault();\n        }\n      }\n    }\n    /**\n     * Handles key presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _handleKeydown(event) {\n      /** @type {?} */\n      const keyCode = event.keyCode;\n\n      if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n        this.openMenu();\n      }\n    }\n    /**\n     * Handles click events on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _handleClick(event) {\n      if (this.triggersSubmenu()) {\n        // Stop event propagation to avoid closing the parent menu.\n        event.stopPropagation();\n        this.openMenu();\n      } else {\n        this.toggleMenu();\n      }\n    }\n    /**\n     * Handles the cases where the user hovers over the trigger.\n     * @private\n     * @return {?}\n     */\n\n\n    _handleHover() {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      if (!this.triggersSubmenu()) {\n        return;\n      }\n\n      this._hoverSubscription = this._parentMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(filter(\n      /**\n      * @param {?} active\n      * @return {?}\n      */\n      active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered())).subscribe(\n          /**\n          * @return {?}\n          */\n          () => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n    }\n    /**\n     * Gets the portal that should be attached to the overlay.\n     * @private\n     * @return {?}\n     */\n\n\n    _getPortal() {\n      // Note that we can avoid this check by keeping the portal on the menu panel.\n      // While it would be cleaner, we'd have to introduce another required method on\n      // `MatMenuPanel`, making it harder to consume.\n      if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n        this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      }\n\n      return this._portal;\n    }\n\n  }\n\n  MatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) {\n    return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MatMenu, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n  };\n\n  MatMenuTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatMenuTrigger,\n    selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n    hostAttrs: [\"aria-haspopup\", \"true\", 1, \"mat-menu-trigger\"],\n    hostVars: 2,\n    hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) {\n          return ctx._handleMousedown($event);\n        })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n      }\n    },\n    inputs: {\n      restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"],\n      _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n      menu: [\"matMenuTriggerFor\", \"menu\"],\n      menuData: [\"matMenuTriggerData\", \"menuData\"]\n    },\n    outputs: {\n      menuOpened: \"menuOpened\",\n      onMenuOpen: \"onMenuOpen\",\n      menuClosed: \"menuClosed\",\n      onMenuClose: \"onMenuClose\"\n    },\n    exportAs: [\"matMenuTrigger\"]\n  });\n  /** @nocollapse */\n\n  return MatMenuTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatMenuTrigger.prototype._portal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._overlayRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._menuOpen;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._closingActionsSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._hoverSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._menuCloseSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._scrollStrategy;\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._handleTouchStart;\n  /** @type {?} */\n\n  MatMenuTrigger.prototype._openedBy;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._menu;\n  /**\n   * Data to be passed along to any lazily-rendered content.\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.menuData;\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.restoreFocus;\n  /**\n   * Event emitted when the associated menu is opened.\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.menuOpened;\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.onMenuOpen;\n  /**\n   * Event emitted when the associated menu is closed.\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.menuClosed;\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.onMenuClose;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._overlay;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._viewContainerRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._parentMenu;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._menuItemInstance;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._dir;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._focusMonitor;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n// tslint:disable-next-line:class-name\n\n\nlet _MatMenuDirectivesModule = /*#__PURE__*/(() => {\n  class _MatMenuDirectivesModule {}\n\n  _MatMenuDirectivesModule.ɵfac = function _MatMenuDirectivesModule_Factory(t) {\n    return new (t || _MatMenuDirectivesModule)();\n  };\n\n  _MatMenuDirectivesModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: _MatMenuDirectivesModule\n  });\n  _MatMenuDirectivesModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [MatCommonModule]\n  });\n  return _MatMenuDirectivesModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatMenuDirectivesModule, {\n    declarations: function () {\n      return [MatMenuTrigger, MatMenuContent];\n    },\n    exports: function () {\n      return [MatMenuTrigger, MatMenuContent, MatCommonModule];\n    }\n  });\n})();\n\nlet MatMenuModule = /*#__PURE__*/(() => {\n  class MatMenuModule {}\n\n  MatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n    return new (t || MatMenuModule)();\n  };\n\n  MatMenuModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatMenuModule\n  });\n  MatMenuModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule, CdkScrollableModule, MatCommonModule, _MatMenuDirectivesModule]\n  });\n  return MatMenuModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, {\n    declarations: function () {\n      return [_MatMenu, MatMenuItem];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule];\n    },\n    exports: function () {\n      return [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-positions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenu, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c }; //# sourceMappingURL=menu.js.map","map":null,"metadata":{},"sourceType":"module"}