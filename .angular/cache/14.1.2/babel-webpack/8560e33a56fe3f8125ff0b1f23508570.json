{"ast":null,"code":"import { Directive, isDevMode, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/toolbar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatToolbar.\n\n/**\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\n\nclass MatToolbarBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  MatToolbarBase.prototype._elementRef;\n}\n/** @type {?} */\n\n\nconst _MatToolbarMixinBase = /*#__PURE__*/mixinColor(MatToolbarBase);\n\nlet MatToolbarRow = /*#__PURE__*/(() => {\n  class MatToolbarRow {}\n\n  MatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) {\n    return new (t || MatToolbarRow)();\n  };\n\n  MatToolbarRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatToolbarRow,\n    selectors: [[\"mat-toolbar-row\"]],\n    hostAttrs: [1, \"mat-toolbar-row\"],\n    exportAs: [\"matToolbarRow\"]\n  });\n  return MatToolbarRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatToolbar = /*#__PURE__*/(() => {\n  class MatToolbar extends _MatToolbarMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?=} document\n     */\n    constructor(elementRef, _platform, document) {\n      super(elementRef);\n      this._platform = _platform; // TODO: make the document a required param when doing breaking changes.\n\n      this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      if (!isDevMode() || !this._platform.isBrowser) {\n        return;\n      }\n\n      this._checkToolbarMixedModes();\n\n      this._toolbarRows.changes.subscribe(\n      /**\n      * @return {?}\n      */\n      () => this._checkToolbarMixedModes());\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @private\n     * @return {?}\n     */\n\n\n    _checkToolbarMixedModes() {\n      if (!this._toolbarRows.length) {\n        return;\n      } // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n\n      /** @type {?} */\n\n\n      const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(\n      /**\n      * @param {?} node\n      * @return {?}\n      */\n      node => !(node.classList && node.classList.contains('mat-toolbar-row'))).filter(\n      /**\n      * @param {?} node\n      * @return {?}\n      */\n      node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)).some(\n      /**\n      * @param {?} node\n      * @return {?}\n      */\n      node => !!(node.textContent && node.textContent.trim()));\n\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n\n  }\n\n  MatToolbar.ɵfac = function MatToolbar_Factory(t) {\n    return new (t || MatToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  MatToolbar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatToolbar,\n    selectors: [[\"mat-toolbar\"]],\n    contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatToolbarRow, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-toolbar\"],\n    hostVars: 4,\n    hostBindings: function MatToolbar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n      }\n    },\n    inputs: {\n      color: \"color\"\n    },\n    exportAs: [\"matToolbar\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 0,\n    template: function MatToolbar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n      }\n    },\n    styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatToolbar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatToolbar.prototype._document;\n  /**\n   * Reference to all toolbar row elements that have been projected.\n   * @type {?}\n   */\n\n  MatToolbar.prototype._toolbarRows;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatToolbar.prototype._platform;\n}\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/toolbar-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MatToolbarModule = /*#__PURE__*/(() => {\n  class MatToolbarModule {}\n\n  MatToolbarModule.ɵfac = function MatToolbarModule_Factory(t) {\n    return new (t || MatToolbarModule)();\n  };\n\n  MatToolbarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatToolbarModule\n  });\n  MatToolbarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatCommonModule]\n  });\n  return MatToolbarModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatToolbarModule, {\n    declarations: function () {\n      return [MatToolbar, MatToolbarRow];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatToolbar, MatToolbarRow, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError }; //# sourceMappingURL=toolbar.js.map","map":null,"metadata":{},"sourceType":"module"}